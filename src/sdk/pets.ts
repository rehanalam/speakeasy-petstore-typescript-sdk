/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { AddAcceptEnum, petsAdd } from "../funcs/petsAdd.js";
import { AddFormAcceptEnum, petsAddForm } from "../funcs/petsAddForm.js";
import { AddRawAcceptEnum, petsAddRaw } from "../funcs/petsAddRaw.js";
import { petsDelete } from "../funcs/petsDelete.js";
import {
  FindByStatusAcceptEnum,
  petsFindByStatus,
} from "../funcs/petsFindByStatus.js";
import {
  FindByTagsAcceptEnum,
  petsFindByTags,
} from "../funcs/petsFindByTags.js";
import { GetByIdAcceptEnum, petsGetById } from "../funcs/petsGetById.js";
import { petsUpdate, UpdateAcceptEnum } from "../funcs/petsUpdate.js";
import {
  petsUpdateForm,
  UpdateFormAcceptEnum,
} from "../funcs/petsUpdateForm.js";
import { petsUpdateRaw, UpdateRawAcceptEnum } from "../funcs/petsUpdateRaw.js";
import {
  petsUpdateWithForm,
  UpdateWithFormAcceptEnum,
} from "../funcs/petsUpdateWithForm.js";
import { petsUploadImage } from "../funcs/petsUploadImage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { UpdateAcceptEnum } from "../funcs/petsUpdate.js";

export { UpdateRawAcceptEnum } from "../funcs/petsUpdateRaw.js";

export { UpdateFormAcceptEnum } from "../funcs/petsUpdateForm.js";

export { AddAcceptEnum } from "../funcs/petsAdd.js";

export { AddRawAcceptEnum } from "../funcs/petsAddRaw.js";

export { AddFormAcceptEnum } from "../funcs/petsAddForm.js";

export { FindByStatusAcceptEnum } from "../funcs/petsFindByStatus.js";

export { FindByTagsAcceptEnum } from "../funcs/petsFindByTags.js";

export { GetByIdAcceptEnum } from "../funcs/petsGetById.js";

export { UpdateWithFormAcceptEnum } from "../funcs/petsUpdateWithForm.js";

export class Pets extends ClientSDK {
  /**
   * Update an existing pet.
   *
   * @remarks
   * Update an existing pet by Id.
   */
  async update(
    request: components.Pet,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateAcceptEnum },
  ): Promise<operations.UpdatePetResponse | undefined> {
    return unwrapAsync(petsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing pet.
   *
   * @remarks
   * Update an existing pet by Id.
   */
  async updateRaw(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateRawAcceptEnum },
  ): Promise<operations.UpdatePetRawResponse | undefined> {
    return unwrapAsync(petsUpdateRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing pet.
   *
   * @remarks
   * Update an existing pet by Id.
   */
  async updateForm(
    request: components.Pet,
    options?: RequestOptions & { acceptHeaderOverride?: UpdateFormAcceptEnum },
  ): Promise<operations.UpdatePetFormResponse | undefined> {
    return unwrapAsync(petsUpdateForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a new pet to the store.
   *
   * @remarks
   * Add a new pet to the store.
   */
  async add(
    request: components.Pet,
    options?: RequestOptions & { acceptHeaderOverride?: AddAcceptEnum },
  ): Promise<operations.AddPetResponse | undefined> {
    return unwrapAsync(petsAdd(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a new pet to the store.
   *
   * @remarks
   * Add a new pet to the store.
   */
  async addRaw(
    request: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array,
    options?: RequestOptions & { acceptHeaderOverride?: AddRawAcceptEnum },
  ): Promise<operations.AddPetRawResponse | undefined> {
    return unwrapAsync(petsAddRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a new pet to the store.
   *
   * @remarks
   * Add a new pet to the store.
   */
  async addForm(
    request: components.Pet,
    options?: RequestOptions & { acceptHeaderOverride?: AddFormAcceptEnum },
  ): Promise<operations.AddPetFormResponse | undefined> {
    return unwrapAsync(petsAddForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Finds Pets by status.
   *
   * @remarks
   * Multiple status values can be provided with comma separated strings.
   */
  async findByStatus(
    request: operations.FindPetsByStatusRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: FindByStatusAcceptEnum;
    },
  ): Promise<operations.FindPetsByStatusResponse | undefined> {
    return unwrapAsync(petsFindByStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Finds Pets by tags.
   *
   * @remarks
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   */
  async findByTags(
    request: operations.FindPetsByTagsRequest,
    options?: RequestOptions & { acceptHeaderOverride?: FindByTagsAcceptEnum },
  ): Promise<operations.FindPetsByTagsResponse | undefined> {
    return unwrapAsync(petsFindByTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Find pet by ID.
   *
   * @remarks
   * Returns a single pet.
   */
  async getById(
    security: operations.GetPetByIdSecurity,
    request: operations.GetPetByIdRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetByIdAcceptEnum },
  ): Promise<operations.GetPetByIdResponse | undefined> {
    return unwrapAsync(petsGetById(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Updates a pet in the store with form data.
   *
   * @remarks
   * Updates a pet resource based on the form data.
   */
  async updateWithForm(
    request: operations.UpdatePetWithFormRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdateWithFormAcceptEnum;
    },
  ): Promise<operations.UpdatePetWithFormResponse | undefined> {
    return unwrapAsync(petsUpdateWithForm(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a pet.
   *
   * @remarks
   * Delete a pet.
   */
  async delete(
    request: operations.DeletePetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(petsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Uploads an image.
   *
   * @remarks
   * Upload image of the pet.
   */
  async uploadImage(
    request: operations.UploadFileRequest,
    options?: RequestOptions,
  ): Promise<components.ApiResponse | undefined> {
    return unwrapAsync(petsUploadImage(
      this,
      request,
      options,
    ));
  }
}
