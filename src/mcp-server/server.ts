/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { PetstoreCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$ordersDelete } from "./tools/ordersDelete.js";
import { tool$ordersGetById } from "./tools/ordersGetById.js";
import { tool$ordersPlace } from "./tools/ordersPlace.js";
import { tool$ordersPlaceForm } from "./tools/ordersPlaceForm.js";
import { tool$ordersPlaceRaw } from "./tools/ordersPlaceRaw.js";
import { tool$petsAdd } from "./tools/petsAdd.js";
import { tool$petsAddForm } from "./tools/petsAddForm.js";
import { tool$petsAddRaw } from "./tools/petsAddRaw.js";
import { tool$petsDelete } from "./tools/petsDelete.js";
import { tool$petsFindByStatus } from "./tools/petsFindByStatus.js";
import { tool$petsFindByTags } from "./tools/petsFindByTags.js";
import { tool$petsUpdate } from "./tools/petsUpdate.js";
import { tool$petsUpdateForm } from "./tools/petsUpdateForm.js";
import { tool$petsUpdateRaw } from "./tools/petsUpdateRaw.js";
import { tool$petsUpdateWithForm } from "./tools/petsUpdateWithForm.js";
import { tool$petsUploadImage } from "./tools/petsUploadImage.js";
import { tool$usersCreate } from "./tools/usersCreate.js";
import { tool$usersCreateForm } from "./tools/usersCreateForm.js";
import { tool$usersCreateFromList } from "./tools/usersCreateFromList.js";
import { tool$usersCreateRaw } from "./tools/usersCreateRaw.js";
import { tool$usersDelete } from "./tools/usersDelete.js";
import { tool$usersGetByName } from "./tools/usersGetByName.js";
import { tool$usersLogin } from "./tools/usersLogin.js";
import { tool$usersLogout } from "./tools/usersLogout.js";
import { tool$usersUpdate } from "./tools/usersUpdate.js";
import { tool$usersUpdateForm } from "./tools/usersUpdateForm.js";
import { tool$usersUpdateRaw } from "./tools/usersUpdateRaw.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL: string;
  petstoreAuth?: SDKOptions["petstoreAuth"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Petstore",
    version: "0.1.3",
  });

  const client = new PetstoreCore({
    petstoreAuth: deps.petstoreAuth,
    serverURL: deps.serverURL,
    serverIdx: deps.serverIdx,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$petsUpdate);
  tool(tool$petsUpdateRaw);
  tool(tool$petsUpdateForm);
  tool(tool$petsAdd);
  tool(tool$petsAddRaw);
  tool(tool$petsAddForm);
  tool(tool$petsFindByStatus);
  tool(tool$petsFindByTags);
  tool(tool$petsUpdateWithForm);
  tool(tool$petsDelete);
  tool(tool$petsUploadImage);
  tool(tool$ordersPlace);
  tool(tool$ordersPlaceRaw);
  tool(tool$ordersPlaceForm);
  tool(tool$ordersGetById);
  tool(tool$ordersDelete);
  tool(tool$usersCreate);
  tool(tool$usersCreateRaw);
  tool(tool$usersCreateForm);
  tool(tool$usersCreateFromList);
  tool(tool$usersLogin);
  tool(tool$usersLogout);
  tool(tool$usersGetByName);
  tool(tool$usersUpdate);
  tool(tool$usersUpdateRaw);
  tool(tool$usersUpdateForm);
  tool(tool$usersDelete);

  return server;
}
